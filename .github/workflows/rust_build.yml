name: Rust Build

on:
  push:
    tags:
      - "v*"

  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }} for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: "minibreak-linux"
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            asset_name: "minibreak-windows.exe"
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: "minibreak-mac"
      fail-fast: false

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Archive and upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/minibreak*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: minibreak*
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream
